----------SpringCloudEureka--------------
1.简单的两个eureka相互注册的例子
2.在hosts文件中，修改
    127.0.0.1 peer1
    127.0.0.1 peer2
3.启动时报错，没有关系
4.http://peer2:8001查看启动情况
-----------SpirngCloudEureka2-------------
因为eureka注册中心的重要性，需要在系统中启动2个服务器，以保证服务的高可用性
-----------SpringCloudProducer-----------
将服务注册到peer2上，因为单机情况
-----------SpringCloudProducer2----------
1.producer的第二个实例，同一个服务，生成2个实例，只是端口号不同
-----------SpringCloudConsumer-----------
0.将服务注册到peer2上，因为单机情况
1.先启动SpringCloudProducer，然后启动SpringCloudConsumer
2.http://http://192.168.0.100:8764/hello?name=zhangsan，然后网页显示，hello zhangsan，这里是 SpringCloudProducer,端口是9000
    说明调用成功
3.使用Feign
4.添加hystrix支持，其中对于生产者的接口，有两个实现：一个是Feign实现，正常的调用；一个是本服务的实现，用来处理熔断的情况
5.同时启动2个生产者，用consumer调用，不断刷新网页，会发现端口会在9000和9002之间随机跳动，说明回应的是2个服务。
    关闭其中一个，刷新网页，会发现返回的是，"hello XXX，这里是 SpringCloudProducer,端口是9002"和"hello XXX,!  sorry ,error !"
    之间跳动（开始时），说明熔断处理成功。
6.添加hystrix的dashboard支持，feign和hystrix-dashboard一起使用，还要解决一些问题，用到了再来研究（可以用，但我没配置好）。
------------SpringCloudRibbon------------
1.Ribbon是一个负载均衡客户端，可以很好的控制http和tcp的一些行为。
2.Feign默认集成了ribbon。
3.若同时启动producer和producer2,多次刷新页面，可以看到“端口是9000”和“端口是9002”，来回跳动。说明ribbon集成了负载均衡
4.添加了hystrix的支持
5.添加hystrix的dashboard支持：
      浏览器打开，http://192.168.0.101:9001/hystrix，在页面中的地址输入框中输入http://192.168.0.101:9001/hystrix.stream,
      默认延迟，随便取个名称，就可以可视化的看到本服务的熔断情况
---------------------hystrix--------------------
1.工作原理：https://www.jianshu.com/p/e07661b9bae8
2.隔离，熔断，降级，缓存，监控展示
-----------------------------SpringCloudGateway--------------------
1.使用zuul配置网关，有2个功效，一个是过滤，一个是路由
2.http://192.168.0.101:8766/feign/hello?accessToken=feign&name=aaa，
  http://192.168.0.101:8766/ribbon/hello?accessToken=ribbon&name=aaa
  访问网关地址，zuul根据路径/feign 和/ribbon 的区别，发送给对应的服务中心处理。
----------------------SpringCloudConfigServer---------------------------------------------
1.配置文件存储在：git@github.com:UniverseFreelancer/config-repo.git
2.启动SpringCloudConfigServer，访问http://localhost:7001/neo-config/dev，
    返回{"name":"neo-config","profiles":["dev"],"label":null,"version":null,"state":null,"propertySources":[]}，
    说明启动成功了
    如果直接查看配置文件中的配置信息可访问：http://localhost:7001/neo-config-pro.properties，返回：dev/test/pro:
3.仓库中的配置文件会被转换成web接口，访问可以参照以下的规则：
  /{application}/{profile}[/{label}]
  /{application}-{profile}.yml
  /{label}/{application}-{profile}.yml
  /{application}-{profile}.properties
  /{label}/{application}-{profile}.properties
-------------------------SpringCloudConfigClient-----------------------------------------------
1.更换了ConfigServer的github认证方式，ssh换电脑后不好用
2.configClient获取不到ConfigServer的数据。
--------------------------SpringCloudSSOServer---------------------------------------------------------------------
1.SpringSecurity+oauth2.0，进行安全防护和授权，这里是server端
2.需要结合JWT使用，待扩展
3.需要结合数据库使用，待扩展
4.需要结合redis使用，待扩展
--------------------------SpringCloudSSOClient------------------------------------------------------------------------
1.是SpringSecurity+oauth2.0，进行安全保护和授权，的client端
2.http://localhost:8089，进入登录页面，点击login，用户名：john，密码：123
3.登录后，可以访问http://localhost:8089/test页面，这是被保护的资源
----------------------------------------------------------------------------------------------